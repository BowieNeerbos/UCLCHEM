!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module solveabundances__user__routines 
    interface solveabundances_user_interface 
        subroutine initializephysics(successflag) ! in :uclchemwrap:wrap.f90:uclchemwrap:solveabundances:unknown_interface
            integer intent(out) :: successflag
        end subroutine initializephysics
        subroutine updatetargettime ! in :uclchemwrap:wrap.f90:uclchemwrap:solveabundances:unknown_interface
        end subroutine updatetargettime
        subroutine updatephysics ! in :uclchemwrap:wrap.f90:uclchemwrap:solveabundances:unknown_interface
        end subroutine updatephysics
        subroutine sublimation(abund) ! in :uclchemwrap:wrap.f90:uclchemwrap:solveabundances:unknown_interface
            real :: abund
        end subroutine sublimation
    end interface solveabundances_user_interface
end python module solveabundances__user__routines
python module uclchemwrap ! in 
    interface  ! in :uclchemwrap
        module uclchemwrap ! in :uclchemwrap:wrap.f90
            use physicscore
            use chemistry
            use io
            subroutine cloud(dictionary,outspeciesin,abundance_out,successflag) ! in :uclchemwrap:wrap.f90:uclchemwrap
                use cloud_mod
                character*(*) intent(in) :: dictionary
                character*(*) intent(in) :: outspeciesin
                double precision dimension(500),intent(out) :: abundance_out
                integer intent(out) :: successflag
            end subroutine cloud
            subroutine collapse(collapsein,collapsefilein,writeout,dictionary,outspeciesin,abundance_out,successflag) ! in :uclchemwrap:wrap.f90:uclchemwrap
                use collapse_mod
                integer intent(in) :: collapsein
                character*(*) intent(in) :: collapsefilein
                logical intent(in) :: writeout
                character*(*) intent(in) :: dictionary
                character*(*) intent(in) :: outspeciesin
                double precision dimension(500),intent(out) :: abundance_out
                integer intent(out) :: successflag
            end subroutine collapse
            subroutine hot_core(temp_indx,max_temp,dictionary,outspeciesin,abundance_out,successflag) ! in :uclchemwrap:wrap.f90:uclchemwrap
                use hotcore
                integer intent(in) :: temp_indx
                double precision intent(in) :: max_temp
                character*(*) intent(in) :: dictionary
                character*(*) intent(in) :: outspeciesin
                double precision dimension(500),intent(out) :: abundance_out
                integer intent(out) :: successflag
            end subroutine hot_core
            subroutine cshock(shock_vel,dictionary,outspeciesin,abundance_out,dissipation_time,successflag) ! in :uclchemwrap:wrap.f90:uclchemwrap
                use cshock_mod
                double precision intent(in) :: shock_vel
                character*(*) intent(in) :: dictionary
                character*(*) intent(in) :: outspeciesin
                double precision dimension(500),intent(out) :: abundance_out
                double precision intent(out) :: dissipation_time
                integer intent(out) :: successflag
            end subroutine cshock
            subroutine jshock(shock_vel,dictionary,outspeciesin,abundance_out,successflag) ! in :uclchemwrap:wrap.f90:uclchemwrap
                use jshock_mod
                double precision intent(in) :: shock_vel
                character*(*) intent(in) :: dictionary
                character*(*) intent(in) :: outspeciesin
                double precision dimension(500),intent(out) :: abundance_out
                integer intent(out) :: successflag
            end subroutine jshock
            subroutine get_rates(dictionary,abundancesin,rateindxs,speciesrates,successflag) ! in :uclchemwrap:wrap.f90:uclchemwrap
                use cloud_mod
                character*(*) intent(in) :: dictionary
                double precision dimension(500),intent(in) :: abundancesin
                integer dimension(500) :: rateindxs
                double precision dimension(500),intent(out) :: speciesrates
                integer intent(out) :: successflag
            end subroutine get_rates
            subroutine get_odes(dictionary,abundancesin,ratesout) ! in :uclchemwrap:wrap.f90:uclchemwrap
                use cloud_mod
                character*(*) intent(in) :: dictionary
                double precision dimension(500),intent(in) :: abundancesin
                double precision dimension(500),intent(out) :: ratesout
            end subroutine get_odes
            subroutine solveabundances(dictionary,outspeciesin,successflag,initializephysics,updatephysics,updatetargettime,sublimation) ! in :uclchemwrap:wrap.f90:uclchemwrap
                use solveabundances__user__routines
                character*(*) :: dictionary
                character*(*) :: outspeciesin
                integer intent(out) :: successflag
                external initializephysics
                external updatephysics
                external updatetargettime
                external sublimation
            end subroutine solveabundances
            subroutine dictionary_parser(dictionary,outspeciesin,successflag) ! in :uclchemwrap:wrap.f90:uclchemwrap
                character*(*) :: dictionary
                character*(*) :: outspeciesin
                integer intent(out) :: successflag
            end subroutine dictionary_parser
            subroutine alpha_parser(alpha_string) ! in :uclchemwrap:wrap.f90:uclchemwrap
                character*(*) :: alpha_string
            end subroutine alpha_parser
        end module uclchemwrap
    end interface 
end python module uclchemwrap

! This file was auto-generated with f2py (version:1.21.2).
! See http://cens.ioc.ee/projects/f2py2e/
